type Query {
	msg: String
	info: String!
	feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
	link(id: ID!): Link
}

type Mutation {
	post(url: String!, desc: String!): Link!
	updateLink(id: ID!, url: String, desc: String): Link
	deleteLink(id: ID!): Link
	signup(email: String!, password: String!, name: String!): AuthPayload
	login(email: String!, password: String!): AuthPayload
	vote(linkId: ID!): Vote
}

type Feed {
	links: [Link!]!
	count: Int!
}

type Link {
	id: ID!
	desc: String!
	url: String!
	postedBy: User
	votes: [Vote!]!
}

type AuthPayload {
	token: String
	user: User
}

type User {
	id: ID!
	name: String!
	email: String!
	links: [Link!]!
}

type Subscription {
	newLink: Link
	newVote: Vote
}

type Vote {
	id: ID!
	link: Link!
	user: User!
}

input LinkOrderByInput {
	description: Sort
	url: Sort
	createdAt: Sort
	id: Sort
}

enum Sort {
	asc
	desc
}
